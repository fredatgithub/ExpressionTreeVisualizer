<DockPanel x:Class="ExpressionTreeVisualizer.VisualizerDataControl" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
           xmlns:ag="clr-namespace:WpfAutoGrid"
           xmlns:my="clr-namespace:ExpressionTreeVisualizer" xmlns:my1="clr-namespace:ExpressionTreeVisualizer.Util"
           xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
           xmlns:ygoe="clr-namespace:System.Windows.Controls;assembly=MultiSelectTreeView">

    <FrameworkElement.Resources>
        <my:RootConverter x:Key="RootConverter" />
        <my:ConditionalFormatConverter x:Key="ConditionalFormatConverter" />
        <my:AnyVisibilityConverter x:Key="AnyVisibilityConverter" />
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <SolidColorBrush x:Key="TypeColor" Color="#066555" />
    </FrameworkElement.Resources>

    <DockPanel Width="{Binding ActualWidth, ElementName=endNodes}" Margin="0,12,12,12" DockPanel.Dock="Right">
        <ag:AutoGrid x:Name="endNodes" ChildHorizontalAlignment="Left" ColumnCount="1" DockPanel.Dock="Bottom">
            <Grid.Resources>
                <Style TargetType="TextBlock">
                    <Setter Property="Margin" Value="0,10,0,5" />
                </Style>
                <Style TargetType="DataGrid">
                    <Setter Property="IsReadOnly" Value="True" />
                    <Setter Property="AutoGenerateColumns" Value="False" />
                    <Setter Property="Visibility" Value="{Binding ItemsSource, RelativeSource={RelativeSource Self}, Converter={StaticResource AnyVisibilityConverter}}" />
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="BorderBrush" Value="Gray" />
                    <Setter Property="HeadersVisibility" Value="Column" />
                    <Setter Property="HorizontalAlignment" Value="Stretch" />
                    <Setter Property="SelectionMode" Value="Extended" />
                </Style>
                <Style TargetType="DataGridRow">
                    <Setter Property="IsSelected" Value="{Binding IsSelected}" />
                </Style>
            </Grid.Resources>

            <TextBlock Text="Parameters: " Visibility="{Binding Parameters, Converter={StaticResource AnyVisibilityConverter}}" />
            <DataGrid ItemsSource="{Binding Parameters}" SelectedValuePath="Model" Name="dgParameters">
                <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding Model.Name}" Header="Name" />
                    <DataGridTextColumn Binding="{Binding Model.Type}" Foreground="{StaticResource TypeColor}" Header="Type" />
                </DataGrid.Columns>
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="SelectionChanged">
                        <b:InvokeCommandAction Command="{Binding UpdateSelection}" CommandParameter="{Binding SelectedItem, ElementName=dgParameters}" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </DataGrid>

            <TextBlock Text="Closed-over variables: " Visibility="{Binding ClosedVars, Converter={StaticResource AnyVisibilityConverter}}" />
            <DataGrid ItemsSource="{Binding ClosedVars}" SelectedValuePath="Model" Name="dgClosedVars">
                <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding Model.Closure}" Header="Closure" />
                    <DataGridTextColumn Binding="{Binding Model.Name}" Header="Name" />
                    <DataGridTextColumn Binding="{Binding Model.Type}" Foreground="{StaticResource TypeColor}" Header="Type" />
                    <DataGridTextColumn Binding="{Binding Model.Value}" Header="Value" />
                </DataGrid.Columns>
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="SelectionChanged">
                        <b:InvokeCommandAction Command="{Binding UpdateSelection}" CommandParameter="{Binding SelectedItem, ElementName=dgClosedVars}" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </DataGrid>

            <TextBlock Text="Constants: " Visibility="{Binding Constants, Converter={StaticResource AnyVisibilityConverter}}" />
            <DataGrid ItemsSource="{Binding Constants}" SelectedValuePath="Model" Name="dgConstants">
                <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding Model.Type}" Foreground="{StaticResource TypeColor}" Header="Type" />
                    <DataGridTextColumn Binding="{Binding Model.Value}" Header="Value" />
                </DataGrid.Columns>
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="SelectionChanged">
                        <b:InvokeCommandAction Command="{Binding UpdateSelection}" CommandParameter="{Binding SelectedItem, ElementName=dgConstants}" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </DataGrid>

            <TextBlock Text="Defaults: " Visibility="{Binding Defaults, Converter={StaticResource AnyVisibilityConverter}}" />
            <DataGrid ItemsSource="{Binding Defaults}" SelectedValuePath="Model" Name="dgDefaults">
                <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding Model.Type}" Foreground="{StaticResource TypeColor}" Header="Type" />
                    <DataGridTextColumn Binding="{Binding Model.Value}" Header="Value" />
                </DataGrid.Columns>
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="SelectionChanged">
                        <b:InvokeCommandAction Command="{Binding UpdateSelection}" CommandParameter="{Binding SelectedItem, ElementName=dgDefaults}" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </DataGrid>
        </ag:AutoGrid>

        <TextBlock VerticalAlignment="Bottom" Text="Source:" Margin="0,0,0,5" DockPanel.Dock="Top" Height="20" />
        <my1:BindableSelectionTextBox x:Name="source" Margin="0,0,0,12" MinWidth="600"  BorderBrush="Gray" BorderThickness="1" FontFamily="Consolas" FontSize="14" IsReadOnly="True" IsReadOnlyCaretVisible="True" Text="{Binding Model.Source}" TextWrapping="Wrap" BindableSelectionStart="{Binding SourceSelectionStart}" BindableSelectionLength="{Binding SourceSelectionLength}">
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="SelectionChanged">
                    <b:InvokeCommandAction Command="{Binding UpdateSelection}" CommandParameter="{Binding Text, ElementName=source}" />
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </my1:BindableSelectionTextBox>
    </DockPanel>

    <DockPanel Margin="12">
        <DockPanel DockPanel.Dock="Bottom" Margin="0,12,0,0">
            <TextBlock Text="Expression:" Margin="0,0,12,0" VerticalAlignment="Center" />
            <TextBox Name="txbRootExpression" VerticalContentAlignment="Center" />
        </DockPanel>
        <StackPanel Margin="0,0,0,5" VerticalAlignment="Bottom" DockPanel.Dock="Top" Orientation="Horizontal">
            <TextBlock VerticalAlignment="Bottom" Text="Tree: " />
            <TextBlock FontSize="15" Foreground="Blue" Text="&#128712;">
                <TextBlock.ToolTip>
                    <TextBlock>
                        <Run Foreground="DarkGray" Text="Property of parent" />
                        <Run FontWeight="Bold" Text="Node type" />
                        <Run Foreground="{StaticResource TypeColor}" Text="(Type)" />
                        <Run Text="Name of parameter / member / method" />
                        <Run Text="=Value" />
                    </TextBlock>
                </TextBlock.ToolTip>
            </TextBlock>
        </StackPanel>
        <ygoe:MultiSelectTreeView Name="tree" BorderBrush="Gray" BorderThickness="1" ItemsSource="{Binding Root, Converter={StaticResource RootConverter}}">
            <ygoe:MultiSelectTreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                    <TextBlock DataContext="{Binding Model, Mode=OneTime}">
                        <TextBlock.ToolTip>
                            <ag:AutoGrid Columns="65,Auto">
                                <TextBlock Text="Path" />
                                <TextBlock FontWeight="Bold" Text="{Binding FullPath}" />
                                <TextBlock Text="Node type" />
                                <TextBlock FontWeight="Bold" Text="{Binding NodeType}" />
                                <TextBlock Text="Type" />
                                <TextBlock FontWeight="Bold" Text="{Binding ReflectionTypeName}" />
                                <TextBlock Text="Name" />
                                <TextBlock FontWeight="Bold" Text="{Binding Name}" />
                                <TextBlock Text="Value" />
                                <TextBlock FontWeight="Bold" Text="{Binding StringValue}" />
                            </ag:AutoGrid>
                        </TextBlock.ToolTip>
                        <TextBlock.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Copy watch expression" Click="CopyWatchExpression_Click" />
                                <MenuItem Header="Open value in new window" Command="{Binding OpenNewWindow}" Visibility="{Binding EnableValueInNewWindow, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                <MenuItem Header="Help" Loaded="HelpContextMenu_Loaded" />
                            </ContextMenu>
                        </TextBlock.ContextMenu>
                        <Run Foreground="DarkGray" Text="{Binding PathFromParent, Mode=OneTime, Converter={StaticResource ConditionalFormatConverter}, ConverterParameter=\{0\} -}" />
                        <Run FontWeight="Bold" Text="{Binding NodeType, Mode=OneTime}" />
                        <Run Foreground="{StaticResource TypeColor}" Text="{Binding ReflectionTypeName, Mode=OneTime, Converter={StaticResource ConditionalFormatConverter}, ConverterParameter=({0})}" />
                        <Run Text="{Binding Name, Mode=OneTime, Converter={StaticResource ConditionalFormatConverter}, ConverterParameter=\{0\}}" />
                        <Run Text="{Binding StringValue, Mode=OneTime, Converter={StaticResource ConditionalFormatConverter}, ConverterParameter=\= {0}}" />
                    </TextBlock>
                </HierarchicalDataTemplate>
            </ygoe:MultiSelectTreeView.ItemTemplate>
            <ygoe:MultiSelectTreeView.ItemContainerStyle>
                <Style TargetType="ygoe:MultiSelectTreeViewItem">
                    <Setter Property="IsExpanded" Value="True" />
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />

                    <!--<Setter Property="Border.BorderBrush" Value="{x:Static Brushes.Transparent}" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsSelected}">
                            <Setter Property="Control.Background" Value="{x:Static SystemColors.HighlightBrush}" />
                            <Setter Property="TextBlock.Foreground" Value="{x:Static SystemColors.HighlightTextBrush}" />
                        </DataTrigger>
                    </Style.Triggers>-->
                </Style>
            </ygoe:MultiSelectTreeView.ItemContainerStyle>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="SelectionChanged">
                    <b:InvokeCommandAction Command="{Binding UpdateSelection}" CommandParameter="{Binding LastSelectedItem, ElementName=tree}" />
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </ygoe:MultiSelectTreeView>
    </DockPanel>
</DockPanel>
